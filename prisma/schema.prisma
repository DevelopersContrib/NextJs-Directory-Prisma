generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String   @default("")
  email    String   @unique
  password String   @default("")
  avatar String     @default("")
  domain String     @default("")
  receive_email Boolean @default(false)
  receive_newsletter Boolean @default(false)
  links    Link[]
  payment    Payment[]
  votes_up    LinkVotesUp[]
  votes_down    LinkVotesDown[]
  history    History[]
  folders    Folder[]
  posts    Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  category_id     String @id @default(uuid())
  category_name   String
  links  Link[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([category_name])
}

model Link {


  id       String @id @default(uuid())
  title    String
  description     String @db.LongText
  categoryId String
  userId   String
  company_name String @default("")
  company_logo String @default("")
  screenshot String @default("")
  url String @default("")
  approved Boolean @default(false)
  featured Boolean @default(false)
  from_vnoc Boolean @default(false)
  approved_by String @default("")

  votes_up    LinkVotesUp[]
  votes_down    LinkVotesDown[]
  clicks    LinkClicks[]
  folders    Folder[]

  deletedAt   DateTime?
  archivedAt  DateTime?
  favoritedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [category_id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([title])
}

model LinkVotesUp {
  id       String @id @default(uuid())
  LinkId   String
  userId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  link   Link   @relation(fields: [LinkId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([LinkId])
}

model LinkVotesDown {
  id       String @id @default(uuid())
  LinkId   String
  userId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  link   Link   @relation(fields: [LinkId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([LinkId])
}


model LinkClicks {
  id       String @id @default(uuid())
  LinkId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  link   Link   @relation(fields: [LinkId], references: [id], onDelete: Cascade)
  
  @@index([LinkId])
}


model History {
  id       String @id @default(uuid())
  message     String @db.LongText
  userId   String @default("")
  link String @default("")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}


model Payment {
  id       String @id @default(uuid())
  userId   String @default("")
  amount   Float  @default(0)
  payment_type String @default("")
  stripe_charge_id String @default("")
  stripe_payment_status String @default("")
  stripe_receipt_url String @default("")
  description     String @db.LongText
  result_json     String @db.LongText
  other_info     String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model Folder {
  id     String @id @default(uuid())
  name   String
  userId String
  posts  Post[]
  links  Link[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([name])
}

model Post {
  id       String @id @default(uuid())
  title    String
  body     String @db.LongText
  folderId String
  userId   String

  deletedAt   DateTime?
  archivedAt  DateTime?
  favoritedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([title])
}